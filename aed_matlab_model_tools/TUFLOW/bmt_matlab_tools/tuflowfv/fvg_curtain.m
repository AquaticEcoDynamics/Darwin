% FVG_CURTAIN     visualise TUFLOW-FV model scalar results in profile view.
%
%   curtainObj = fvg_curtain(controlObj,resfil,geofil,pline) adds an empty curtain object
%   to the current axes. controlObj is created
%   by the function fvgraphics.m, resfil is the cell-centre netcdf results
%   file generated by TUFLOW-FV, geofil is the netcdf geometry file created
%   by TUFLOW-FV & pline is a set of points which define the curtain.
%
%   curtainObj = fvg_curtain(controlObj,resfil,geofil,pline,'PropertyName',PropertyValue,...)
%   creates a curtain object defined by the specified property name / property value
%   pairs. Default values are assigned to all unspecified properties.
%
%   Execute get(curtainObj), to see a list of the curtainObj's properties and
%   their current values.
%
%   Execute set(curtainObj,'PropertyName',PropertyValue) to change a
%   property of an existing curtainObj.
%
%
%   /-/-/-/-/-/-/-/-/ EXAMPLES /-/-/-/-/-/-/-/-/
%
%   (1): Create a curtainObj displaying the salinity between 2 points
%   controlObj = fvgraphics;
%   curtainObj = fvg_curtain(controlObj,'mymodel.nc','mymodel_geo.nc',[p1_x p1_y; p2_x p2_y],'variables','SAL')
%
%   (2): Change the location of the curtain
%   set(curtainObj,'Pline',[p3_x p3_y; p4_x p4_y])
%
%
%   /-/-/-/-/-/-/-/-/ PROPERTIES /-/-/-/-/-/-/-/-/
%
%   Type           ==> fvg_curtain
%
%   Resfil         ==> TUFLOW-FV cell-centre netcdf results file
%
%   Geofil         ==> TUFLOW-FV netcdf geometry file
%
%   ControlObj     ==> object created by fvgraphics.m with which the time to view results is set
%
%   ResObj         ==> object created by fvres_curtain.m with which results are processed and stored
%
%   PatchObj       ==> object created by patch.m with which results are displayed
%
%   PeerObj        ==> object created by axes.m which the PatchObj exists within
%
%   Pline          ==> A set of points which define the curtainObj
%
%   Chainage       {false} | true ==> plot curtain against chainage or on the x-y plane
%
%   LineObj        ==> object created by line.m which marks the location of the Pline
%
%   MarkObj        ==> object created by line.m which marks the start of the Pline
%
%   TitleTime      {off} | on ==> display the time as the PeerObj's (axes) title
%
%   ListObj_up     ==> object created by addlistener.m which listens to updates in the results from the ResObj
%
%   ListObj_ut     ==> object created by addlistener.m which listens to updates in the current time from the ControlObj
%
%   Variables      ==> variable to visualise, when 2 variables specified the magnitude is computed and displayed
%
%   FaceColor      {ColorSpec} | none | flat | interp ==> color of cell faces
%
%   EdgeColor      {ColorSpec} | none ==> color of cell edges
%
%
% See also FVG_SHEET & FVG_SHEETVEC
%
% http://tuflow.com/fvforum/index.php?/forum/16-matlab/
% http://fvwiki.tuflow.com/index.php?title=MATLAB_TUTORIAL
%
% Jesper Nielsen, Copyright BMT WBM


classdef (CaseInsensitiveProperties = true) fvg_curtain < fvg
    properties (Constant)
        Type = 'fvg_curtain'
    end
    properties
        Transparency
        LineObj
        MarkObj
    end
    properties (Dependent = true)
        Pline
        Chainage = false
    end
    properties (Hidden = true)
        patch_data
    end
    
    methods
        % // constructor method //
        function obj = fvg_curtain(controlObj,resfil,geofil,pline,varargin)
            % Pre-initialization — compute arguments for superclass constructor. Any code not using output argument (obj)
            if isempty(pline)
                [h1,h2] = myline;
                pline(:,1) = get(h1,'XData');
                pline(:,2) = get(h1,'YData');
            else
                h1 = line('XData',pline(:,1),'YData',pline(:,2),'Color','k');
                h2 = line('XData',pline(1,1),'YData',pline(1,2),'Marker','o','color','w','MarkerEdgeColor','k','LineStyle','none');
            end
            h = fvres_curtain(resfil,geofil,pline); % no variables so timestep does not matter
            
            % Object initialization — call superclass constructor before accessing object. You cannot conditionalize this statement
            obj@fvg(controlObj,resfil,h);
            
            % Post initialization — Operations related to the subclass, referencing and assigning to obj, calling class methods, passing onto functions etc.
            % -- the pline already set
            obj.LineObj = h1;
            obj.MarkObj = h2;
            
            % -- update the patches to display the empty curtain object
            set(obj.PatchObj,'Faces',obj.ResObj.faces,'Vertices',obj.ResObj.vertices,'FaceVertexCData',NaN,'FaceColor','flat','EdgeColor','none');
            
            % -- ensure initialise at correct time
            tmp = get(obj.ControlObj,'TimeCurrent');
            set(obj.ResObj,'TimeCurrent',tmp) % updatepatchdata won't do anything until a variable has been set
            
            % -- property / value pairs (optional inputs)
            noi = length(varargin);
            if mod(noi,2) ~= 0
                error('expecting optional inputs as property / value pairs')
            end
            for aa = 1:2:noi
                set(obj,varargin{aa},varargin{aa+1})
            end
        end
        % // set methods //
        function set.Pline(obj,val)
            if isempty(val)
                delete(obj.LineObj,obj.MarkObj)
                [obj.LineObj,obj.MarkObj] = myline;
            else
                set(obj.LineObj,'XData',val(:,1),'YData',val(:,2));
                set(obj.MarkObj,'XData',val(1,1),'YData',val(1,2));
            end
            pline(:,1) = get(obj.LineObj,'XData');
            pline(:,2) = get(obj.LineObj,'YData');
            set(obj.ResObj,'Pline',pline)
        end
        function set.Chainage(obj,val)
            if ~islogical(val)
                error('expecting input of type logical for property chainage')
            end
            set(obj.ResObj,'Chainage',val)
        end
        function set.Transparency(obj,val)
            display('Transparency property is not yet supported for fvg_curtain')
            return
        end
        % // get methods //
        function val = get.Pline(obj)
            val = get(obj.ResObj,'Pline');
        end
        function val = get.Chainage(obj)
            val = get(obj.ResObj,'Chainage');
        end
        
        % // update patches //
        function updatepatchdata(obj) % called through the super class
            %             vars = get(obj,'Variables');
            vars = fieldnames(obj.ResObj.ResultsCurtain); % Customized variable names are used for customized results
            if ~isempty(vars)
                if length(vars) == 2
                    obj.patch_data = hypot(obj.ResObj.ResultsCurtain.(vars{1}),obj.ResObj.ResultsCurtain.(vars{2})); % no functionality for visualising contoured current directions - use vectors
                else
                    obj.patch_data = obj.ResObj.ResultsCurtain.(vars{1});
                end
                
                set(obj.PatchObj,'Faces',obj.ResObj.faces,'Vertices',obj.ResObj.vertices); % setting the faces should only be done when the pline is changed - this should be cleaned up
                if strcmpi(obj.FaceColor,'flat')
                    set(obj.PatchObj,'FaceVertexCData',obj.patch_data)
                end
                if obj.Transparency
                    set(obj.PatchObj,'FaceVertexAlphaData',obj.patch_data)
                end
                if strcmp(obj.TitleTime,'on')
                    tstr = datestr(obj.ResObj.TimeCurrent,'dd-mmm-yyyy HH:MM:SS');
                    set(get(obj.PeerObj,'title'),'string',tstr)
                end
            end
        end
    end
end
% // subfunctions //